import heapq
import numpy as np
import numpy.random as ra
import platform

from code_pipeline.tests_generation import RoadTestFactory
from .test_suite_generator import TestSuiteGenerator

from crag.crag import CRAG
from crag.pict import PICTTestSuiteGenerator


def get_os():
    os = platform.system()
    if os == 'Windows':
        return 'windows'
    elif os == 'Linux':
        return 'linux'
    elif os == 'Darwin':
        return 'mac'
    else:
        return None

def get_fullpath(filename):
    dirname = os.path.dirname(__file__)
    return os.path.join(dirname, filename)

def get_local_pict_executable():
    host_os = get_os()
    if host_os is None:
        return None

    return get_fullpath(f"./pict-{host_os}")


class CRAGExample:
    """
    Example for using crag as a library
    """

    def __init__(self, executor=None, map_size=None):
        self.executor = executor
        self.map_size = map_size

        core_params = {}
        core_params["use_seed"] = True
        core_params["seed_best"] = True
        core_params["best_ratio"] = True
        core_params["resample"] = True
        core_params["fitness_aggregation_method"] = "minimum"
        core_params["max_strength"] = 5

        geometry_params = {}
        geometry_params["road_section_count"] = 5
        geometry_params["param_value_count"] = 5
        geometry_params["max_road_scalar"] = 1.2
        geometry_params["min_road_scalar"] = 0.6
        geometry_params["lane_width"] = 10
        geometry_params["map_size"] = 200
        geometry_params["min_radius"] = 15

        def budget_availability_function():
            return not self.executor.is_over()


        def evaluate_function(road):
            """Evaluate function takes a road generated by CRAG
               and returns a numeric value characterizing the
               (negative) fitness of a road. A road with a smaller
               numeric value is preferable in search. This specific
               function evaluates the road over driving agents
               specified in SBFT'23 Competition."""
            (road_points, is_in_map, is_reframable) = road
            if (not is_in_map) and (not is_reframable):
                return [1000]

            # Check self-intersections and reframe if possible
            if rg.is_likely_self_intersecting(road_points, geometry_params["lane_width"]):
                return [1000]

            if not is_reframable:
                return [1000]

            the_test = RoadTestFactory.create_road_test(road_points)
            test_outcome, description, execution_data = self.executor.execute_test(the_test)
            if execution_data:
                min_oob_distances = heapq.nsmallest(self.MIN_OOB_SAMPLE_SIZE,
                                                    [getattr(x, 'oob_distance') for x in execution_data])
                # Return average of MIN_OOB_SAMPLE_SIZE number of smallest oob distances
                return [sum(min_oob_distances) / len(min_oob_distances)]
            else:
                return [100] # Road determined INVALID

         ptsg = PictTestSuiteGenerator(get_local_pict_executable(), "PICTModel.txt", "PICTSeed.txt")
         self.crag = CRAG(core_params, geometry_params, ptsg, evaluate_function, budget_availability_function)



    def start(self):
        self.crag.generate()
