import carlapidonbicycle
import subprocess
import json
import numpy as np
import matplotlib.pyplot as pl
import os
import platform

def get_os():
    os = platform.system()
    if os == 'Windows':
        return 'windows'
    elif os == 'Linux':
        return 'linux'
    elif os == 'Darwin':
        return 'mac'
    else:
        return None

def get_fullpath(filename):
    dirname = os.path.dirname(__file__)
    return os.path.join(dirname, filename)

def get_local_pict_executable():
    host_os = get_os()
    if host_os is None:
        return None

    return get_fullpath(f"./pict-{host_os}")

def call_command(command):
    return subprocess.getoutput(command).strip()

def plot_road(road, special_road=False):
    xs = [p[0] for p in road]
    ys = [p[1] for p in road]
    if special_road:
        pl.plot(xs, ys, linewidth=10, color="#FF4000")
        pl.plot(xs, ys, linewidth=1, color="#FFFFFF")
        pl.text(xs[-1], ys[-1], "Road resulting in maximum total jerk.")
        pl.title("Roads generated by CRAG")
    else:
        pl.plot(xs, ys, linewidth=10, color="#AAAAAA")
        pl.plot(xs, ys, linewidth=1, color="#FFFF40")

def main():
    pict_executable = get_local_pict_executable()

    p = subprocess.Popen(["crag",
                          "--backend",
                          "pict",
                          "--pict-executable-filepath",
                          get_local_pict_executable()],
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE)

    max_max_jerk = -1
    road_with_max_max_jerk = None

    size = 100
    for i in range(size):
        line = p.stdout.readline()
        crag_road = json.loads(line)[0]
        xs = [pos[0] for pos in crag_road]
        ys = [pos[0] for pos in crag_road]
        jerks = carlapidonbicycle.execute_carla_pid_on_bicycle(xs, ys)["jerk"]
        max_jerk = np.sum(np.abs(jerks))
        if max_jerk > max_max_jerk:
            max_max_jerk = max_jerk
            road_with_max_max_jerk = crag_road
        if i >= size-2:
            p.stdin.write(f"[{-max_jerk}, \"EXIT\"]\n".encode())
        else:
            p.stdin.write(f"[{-max_jerk}]\n".encode())
        p.stdin.flush()
        plot_road(crag_road)
    p.stdin.close()

    plot_road(road_with_max_max_jerk, True)
    pl.xlim([0, 220])
    pl.ylim([0, 220])
    pl.show()
    p.terminate()

main()
